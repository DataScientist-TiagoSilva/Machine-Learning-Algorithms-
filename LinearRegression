import numpy as np 

class LinearRegression:
    
    def__init__(self,lr=0.001,n_iterations=1000):
        self.lr=lr
        self.n_iterations=n_interarions
        self.weights=None
        self.bias=None
        
    def fit(self,X,y):
        n_samples,n_features=X.shape
        self.weights=np.zeros(n_features)
        self.bias = 0
        #initialize weights as zero (m)
        #initialize bias as zero (b)
        
        for _ in range(self.n_iterations):
            y_predicted=np.dot(X,self.weights) + self.bias
            # Predicting results using: y_predicted=mx+b
            
            dw=(1/n_samples)*np.dot(X.T,(y_predicted-y_real))
            #calculating the gradient of the erros fuction for the weights
            db=(1/n_samples)*np.sum(y_predicted-y_real)
            #calculating the gradient of the erros fuction for the bias
            
            self.weights = self.weights - self.lr * dw
            #updating the weights using the learning rate
            self.bias = self.bias - self.lr * db
            #updating the bias using the learning rate
            
            
    def predict(self, X):
        y_predicted = np.dot(X, self.weights) + self.bias
        return y_predicted
